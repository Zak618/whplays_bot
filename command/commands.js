import { ensureUserData } from '../utils/fileData.js';

// –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
export const startMessage = (bot, tasks, userData, chatId, userId) => {
    ensureUserData(userId, userData);

    const solvedCount = userData[userId].completed_tasks.length;
    const totalCount = tasks.length;
    const balance = userData[userId].balance;
      
    const text = 
        `<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n` +
        `–ë–∞–ª–∞–Ω—Å: ${balance} –æ—á–∫–æ–≤\n` +
        `–†–µ—à–µ–Ω–æ –∑–∞–¥–∞—á: ${solvedCount} / ${totalCount}\n\n` +
        `–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:`;

    const menuKeyboard = {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: '–í—Å–µ –∑–∞–¥–∞—á–∏', callback_data: 'show_tasks' },
                    { text: '–ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã', callback_data: 'spin_wheel' }
                ],
                [
                    { text: '–ü–æ–º–æ—â—å', callback_data: 'show_help' },
                    { text: '–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å', callback_data: 'show_stats' }
                ]
            ]
        },
        parse_mode: 'HTML'
    };
      
    bot.sendMessage(chatId, text, menuKeyboard);
    
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
export const showHelp = (bot, chatId) => {
   const helpText = `
<b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>
 
 1. –ù–∞–∂–º–∏—Ç–µ ¬´–í—Å–µ –∑–∞–¥–∞—á–∏¬ª –∏–ª–∏ ¬´–ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã¬ª (—Å–ª—É—á–∞–π–Ω—ã–π –Ω–µ—Ä–µ—à—ë–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç).
 2. –ü–æ–ª—É—á–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –æ–±—ä—è–≤–∏—Ç—å.
 3. –ù–∞–ø–∏—à–∏—Ç–µ JS-–∫–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç (–±–µ–∑ –¥–æ–ø. –∫–æ–º–∞–Ω–¥).
 4. –ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã ‚Äî +1 –∫ –±–∞–ª–∞–Ω—Å—É (–ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ—à–µ–Ω–∏–∏).
 5. ¬´–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å¬ª –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á —Ä–µ—à–µ–Ω–æ –∏ –≤–∞—à –±–∞–ª–∞–Ω—Å.
 
 <b>–ê–≤—Ç–æ—Ä—ã:</b>
 <a href="tg://resolve?domain=rolanzakirov">@rolanzakirov</a> –∏ <a href="tg://resolve?domain=Lojip_0">@Lojip_0</a>
 `.trim();
 
   const menuKeyboard = {
     reply_markup: {
       inline_keyboard: [
         [{ text: '‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'go_main_menu' }]
       ]
     },
     parse_mode: 'HTML'
   };
 
   return bot.sendMessage(chatId, helpText, menuKeyboard);
}


// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (4 –∫–Ω–æ–ø–∫–∏)
export const showMainMenu = (bot, tasks, userData, chatId, userId) => {
  ensureUserData(userId, userData);

  const solvedCount = userData[userId].completed_tasks.length;
  const totalCount = tasks.length;
  const balance = userData[userId].balance;
 
  const text = 
    `<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n` +
    `–ë–∞–ª–∞–Ω—Å: ${balance} –æ—á–∫–æ–≤\n` +
    `–†–µ—à–µ–Ω–æ –∑–∞–¥–∞—á: ${solvedCount} / ${totalCount}\n\n` +
    `–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:`;
 
  const menuKeyboard = {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '–í—Å–µ –∑–∞–¥–∞—á–∏', callback_data: 'show_tasks' },
          { text: '–ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã', callback_data: 'spin_wheel' }
        ],
        [
          { text: '–ü–æ–º–æ—â—å', callback_data: 'show_help' },
          { text: '–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å', callback_data: 'show_stats' }
        ]
      ]
    },
    parse_mode: 'HTML'
   };

  bot.sendMessage(chatId, text, menuKeyboard);
}


// –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏
export const showTasks = (bot, userData, tasks, chatId, userId) => {
    ensureUserData(userId, userData);
    const kb = buildTaskKeyboard(userId, userData, tasks);

    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É:', {
        reply_markup: { inline_keyboard: kb }
    });
}


export const showStats = (bot, userData, tasks, chatId, userId) => {
  ensureUserData(userId, userData);
  const solvedCount = userData[userId].completed_tasks.length;
  const totalCount = tasks.length;
  const balance = userData[userId].balance;
 
  const progressBar = buildProgressBar(solvedCount, totalCount);
 
  const text = 
    `<b>–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å</b>\n\n` +
    `–†–µ—à–µ–Ω–æ –∑–∞–¥–∞—á: ${solvedCount} / ${totalCount}\n` +
    `–ë–∞–ª–∞–Ω—Å –æ—á–∫–æ–≤: ${balance}\n\n` +
    `${progressBar}\n\n` +
    `–ß—Ç–æ –¥–∞–ª—å—à–µ?`;
 
  const kb = {
    reply_markup: {
      inline_keyboard: [
        [{ text: '‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'go_main_menu' }],
        [{ text: '–í—Å–µ –∑–∞–¥–∞—á–∏', callback_data: 'show_tasks' }],
        [{ text: '–ü–æ–º–æ—â—å', callback_data: 'show_help' }]
      ]
    },
    parse_mode: 'HTML'
  };
 
  bot.sendMessage(chatId, text, kb);
}

function buildTaskKeyboard(userId, userData, tasks) {
  const keyboard = [];
  const tasksPerRow = 2;

  for (let i = 0; i < tasks.length; i += tasksPerRow) {
    const row = [];

    for (let j = 0; j < tasksPerRow; j++) {
      const index = i + j;
      if (tasks[index]) {
        const completed = userData[userId].completed_tasks.includes(tasks[index].description);
        const status = completed ? '‚úÖ' : '‚ùå';
        row.push({
          text: `–ó–∞–¥–∞—á–∞ ${index + 1} ${status}`,
          callback_data: `task_${index}`
        });
      }
    }

    keyboard.push(row);
  }

  keyboard.push([{ text: '‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'go_main_menu' }]);
  return keyboard;
}

// –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞—á
const buildProgressBar = (solved, total) => {
  const barLength = 10;
  const ratio = solved / total;
  const filledCount = Math.floor(ratio * barLength);
  const emptyCount = barLength - filledCount;
   
  const filledPart = 'üü©'.repeat(filledCount);
  const emptyPart = '‚¨ú'.repeat(emptyCount);
   
  const percent = (ratio * 100).toFixed(0);
  return `[${filledPart}${emptyPart}] ${percent}%`;
}

