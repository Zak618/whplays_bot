/*******************************************************
 * –ë–û–¢ v1.1x (20 –∑–∞–¥–∞—á, –∫–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π,
 * –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏ –∞–≤—Ç–æ—Ä—ã –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü–æ–º–æ—â—å")
 *******************************************************/
 const TelegramBot = require('node-telegram-bot-api');
 const fs = require('fs');
 const { VM } = require('vm2');
 
 const tasks = [
   {
     description: "–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é —Å—É–º–º—É –¥–≤—É—Ö —á–∏—Å–µ–ª.",
     function_name: "sum",
     tests: [
       { input: [1, 2], expected: 3 },
       { input: [5, 5], expected: 10 },
       { input: [-1, 1], expected: 0 }
     ]
   },
   {
     description: "–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é —Ä–∞–∑–Ω–æ—Å—Ç—å –¥–≤—É—Ö —á–∏—Å–µ–ª.",
     function_name: "subtract",
     tests: [
       { input: [3, 2], expected: 1 },
       { input: [10, 5], expected: 5 },
       { input: [1, -1], expected: 2 }
     ]
   },
   {
     description: "–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –¥–≤—É—Ö —á–∏—Å–µ–ª.",
     function_name: "multiply",
     tests: [
       { input: [3, 2], expected: 6 },
       { input: [10, 5], expected: 50 },
       { input: [-1, 1], expected: -1 }
     ]
   },
   {
     description: "–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é —á–∞—Å—Ç–Ω–æ–µ –¥–≤—É—Ö —á–∏—Å–µ–ª.",
     function_name: "divide",
     tests: [
       { input: [6, 2], expected: 3 },
       { input: [10, 5], expected: 2 },
       { input: [1, -1], expected: -1 }
     ]
   },
   {
     description: "–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç —á–∏—Å–ª–∞.",
     function_name: "square",
     tests: [
       { input: [2], expected: 4 },
       { input: [5], expected: 25 },
       { input: [-1], expected: 1 }
     ]
   },
   {
     description: "–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞.",
     function_name: "factorial",
     tests: [
       { input: [3], expected: 6 },
       { input: [5], expected: 120 },
       { input: [0], expected: 1 }
     ]
   },
   {
     description: "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ —á–∏—Å–ª–æ —á—ë—Ç–Ω–æ–µ, –∏–Ω–∞—á–µ false.",
     function_name: "isEven",
     tests: [
       { input: [2], expected: true },
       { input: [5], expected: false },
       { input: [0], expected: true }
     ]
   },
   {
     description: "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏.",
     function_name: "stringLength",
     tests: [
       { input: ["hello"], expected: 5 },
       { input: ["world"], expected: 5 },
       { input: ["!"], expected: 1 }
     ]
   },
   {
     description: "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.",
     function_name: "toUpperCase",
     tests: [
       { input: ["hello"], expected: "HELLO" },
       { input: ["world"], expected: "WORLD" },
       { input: ["!"], expected: "!" }
     ]
   },
   {
     description: "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.",
     function_name: "toLowerCase",
     tests: [
       { input: ["HELLO"], expected: "hello" },
       { input: ["WORLD"], expected: "world" },
       { input: ["!"], expected: "!" }
     ]
   },
   {
     description: "–†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∑–∞–¥–æ–º –Ω–∞–ø–µ—Ä—ë–¥.",
     function_name: "reverseString",
     tests: [
       { input: ["abc"], expected: "cba" },
       { input: ["Hello"], expected: "olleH" },
       { input: [""], expected: "" }
     ]
   },
   {
     description: "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º.",
     function_name: "isPalindrome",
     tests: [
       { input: ["racecar"], expected: true },
       { input: ["abba"], expected: true },
       { input: ["hello"], expected: false }
     ]
   },
   {
     description: "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç n-–µ —á–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏ (0,1,1,2,3,5...).",
     function_name: "fibonacci",
     tests: [
       { input: [0], expected: 0 },
       { input: [1], expected: 1 },
       { input: [6], expected: 8 }
     ]
   },
   {
     description: "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏–∑ —Ç—Ä—ë—Ö —á–∏—Å–µ–ª.",
     function_name: "maxOfThree",
     tests: [
       { input: [1, 2, 3], expected: 3 },
       { input: [10, 5, 7], expected: 10 },
       { input: [-1, -5, -3], expected: -1 }
     ]
   },
   {
     description: "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑ —Ç—Ä—ë—Ö —á–∏—Å–µ–ª.",
     function_name: "minOfThree",
     tests: [
       { input: [1, 2, 3], expected: 1 },
       { input: [10, 5, 7], expected: 5 },
       { input: [-1, -5, -3], expected: -5 }
     ]
   },
   {
     description: "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –∏–∑ —Ç—Ä—ë—Ö —á–∏—Å–µ–ª.",
     function_name: "averageOfThree",
     tests: [
       { input: [1, 2, 3], expected: 2 },
       { input: [10, 10, 10], expected: 10 },
       { input: [2, 3, 7], expected: 4 }
     ]
   },
   {
     description: "–í–æ–∑–≤–æ–¥–∏—Ç —á–∏—Å–ª–æ x –≤ —Å—Ç–µ–ø–µ–Ω—å y.",
     function_name: "power",
     tests: [
       { input: [2, 3], expected: 8 },
       { input: [5, 2], expected: 25 },
       { input: [10, 0], expected: 1 }
     ]
   },
   {
     description: "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ –ø—Ä–æ—Å—Ç—ã–º (prime).",
     function_name: "isPrime",
     tests: [
       { input: [2], expected: true },
       { input: [15], expected: false },
       { input: [17], expected: true }
     ]
   },
   {
     description: "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Ü–µ–ª–æ–µ –º–µ–∂–¥—É min –∏ max (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ).",
     function_name: "randomBetween",
     tests: [
       { input: [1, 3], expected: "DIAPASON_1_3" },
       { input: [5, 5], expected: 5 }, 
       { input: [-2, 2], expected: "DIAPASON_-2_2" }
     ]
   },
   {
     description: "–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ camelCase.",
     function_name: "toCamelCase",
     tests: [
       { input: ["hello world"], expected: "helloWorld" },
       { input: ["make javascript great again"], expected: "makeJavascriptGreatAgain" },
       { input: [""], expected: "" }
     ]
   }
 ];
 
 // === –†–∞–±–æ—Ç–∞ —Å user_data.json ===
 const USER_DATA_FILE = 'user_data.json';
 let userData = {};
 try {
   if (fs.existsSync(USER_DATA_FILE)) {
     const fileData = fs.readFileSync(USER_DATA_FILE, 'utf-8');
     userData = JSON.parse(fileData);
   }
 } catch (err) {
   console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è user_data.json:', err);
   userData = {};
 }
 
 // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
 function saveUserData() {
   fs.writeFileSync(USER_DATA_FILE, JSON.stringify(userData, null, 2), 'utf-8');
 }

 function ensureUserData(userId) {
   if (!userData[userId]) {
     userData[userId] = {
       balance: 0,
       completed_tasks: []
     };
   }
   if (!Array.isArray(userData[userId].completed_tasks)) {
     userData[userId].completed_tasks = [];
   }
 }
 
 const token = '7313879135:AAFjjP1BHQy4F9euarapRopFTuj5AM1jQJU'; // –í—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
 const bot = new TelegramBot(token, { polling: true });
 
 /**
  * "–ê–Ω–∏–º–∞—Ü–∏—è" –∫—Ä—É—á–µ–Ω–∏—è –∫–æ–ª–µ—Å–∞ —Ñ–æ—Ä—Ç—É–Ω—ã.
  * –ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É,
  * –∞ –≤ –∫–æ–Ω—Ü–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—É—é.
  * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Promise<–∑–∞–¥–∞—á–∞>.
  */
 function spinWheelAnimation(chatId, unsolvedTasks) {
   return new Promise(async (resolve) => {
     let spinMsg = await bot.sendMessage(chatId, "üé° –ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã –∫—Ä—É—Ç–∏—Ç—Å—è...", {
       parse_mode: 'HTML'
     });
 
     let steps = 3;
 
     const interval = setInterval(async () => {
       steps--;
       if (steps <= 0) {
         clearInterval(interval);
         const finalIndex = Math.floor(Math.random() * unsolvedTasks.length);
         const chosenTask = unsolvedTasks[finalIndex];

         await bot.editMessageText(
           `üéâ –ö–æ–ª–µ—Å–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å!\n<b>–ó–∞–¥–∞—á–∞:</b> ${chosenTask.description}\n` +
           `<b>–ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏:</b> ${chosenTask.function_name}\n\n` +
           `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –Ω–∞ JavaScript –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–∞–ª–ª—ã!`,
           {
             chat_id: chatId,
             message_id: spinMsg.message_id,
             parse_mode: 'HTML'
           }
         );
         resolve(chosenTask);
       } else {
         const randomIndex = Math.floor(Math.random() * unsolvedTasks.length);
         const randomTask = unsolvedTasks[randomIndex];
         await bot.editMessageText(
           `üé° –ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã –∫—Ä—É—Ç–∏—Ç—Å—è...\n<b>–°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–∞—á–∞:</b> ${randomTask.description}`,
           {
             chat_id: chatId,
             message_id: spinMsg.message_id,
             parse_mode: 'HTML'
           }
         );
       }
     }, 1200);
   });
 }
 
 // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (4 –∫–Ω–æ–ø–∫–∏)
 async function showMainMenu(chatId, userId) {
   ensureUserData(userId);

   const solvedCount = userData[userId].completed_tasks.length;
   const totalCount = tasks.length;
   const balance = userData[userId].balance;
 
   const text = 
     `<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n` +
     `–ë–∞–ª–∞–Ω—Å: ${balance} –æ—á–∫–æ–≤\n` +
     `–†–µ—à–µ–Ω–æ –∑–∞–¥–∞—á: ${solvedCount} / ${totalCount}\n\n` +
     `–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:`;
 
   const menuKeyboard = {
     reply_markup: {
       inline_keyboard: [
         [
           { text: '–í—Å–µ –∑–∞–¥–∞—á–∏', callback_data: 'show_tasks' },
           { text: '–ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã', callback_data: 'spin_wheel' }
         ],
         [
           { text: '–ü–æ–º–æ—â—å', callback_data: 'show_help' },
           { text: '–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å', callback_data: 'show_stats' }
         ]
       ]
     },
     parse_mode: 'HTML'
   };
 
   await bot.sendMessage(chatId, text, menuKeyboard);
 }
 
 function buildTaskKeyboard(userId) {
   const keyboard = [];
   for (let i = 0; i < tasks.length; i += 2) {
     const row = [];
 
     if (tasks[i]) {
       const completed = userData[userId].completed_tasks.includes(tasks[i].description);
       const status = completed ? '‚úÖ' : '‚ùå';
       row.push({
         text: `–ó–∞–¥–∞—á–∞ ${i + 1} ${status}`,
         callback_data: `task_${i}`
       });
     }
     if (tasks[i + 1]) {
       const completed = userData[userId].completed_tasks.includes(tasks[i + 1].description);
       const status = completed ? '‚úÖ' : '‚ùå';
       row.push({
         text: `–ó–∞–¥–∞—á–∞ ${i + 2} ${status}`,
         callback_data: `task_${i+1}`
       });
     }
     keyboard.push(row);
   }
   keyboard.push([{ text: '‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'go_main_menu' }]);
   return keyboard;
 }
 
 // –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏
 async function showTasks(chatId, userId) {
   ensureUserData(userId);
   const kb = buildTaskKeyboard(userId);
   await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É:', {
     reply_markup: { inline_keyboard: kb }
   });
 }
 
 // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
 async function showHelp(chatId) {
   const helpText = `
 <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>
 
 1. –ù–∞–∂–º–∏—Ç–µ ¬´–í—Å–µ –∑–∞–¥–∞—á–∏¬ª –∏–ª–∏ ¬´–ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã¬ª (—Å–ª—É—á–∞–π–Ω—ã–π –Ω–µ—Ä–µ—à—ë–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç).
 2. –ü–æ–ª—É—á–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –æ–±—ä—è–≤–∏—Ç—å.
 3. –ù–∞–ø–∏—à–∏—Ç–µ JS-–∫–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç (–±–µ–∑ –¥–æ–ø. –∫–æ–º–∞–Ω–¥).
 4. –ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã ‚Äî +1 –∫ –±–∞–ª–∞–Ω—Å—É (–ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ—à–µ–Ω–∏–∏).
 5. ¬´–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å¬ª –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á —Ä–µ—à–µ–Ω–æ –∏ –≤–∞—à –±–∞–ª–∞–Ω—Å.
 
 <b>–ê–≤—Ç–æ—Ä—ã:</b>
 <a href="tg://resolve?domain=rolanzakirov">@rolanzakirov</a> –∏ <a href="tg://resolve?domain=Lojip_0">@Lojip_0</a>
 `.trim();
 
   const menuKeyboard = {
     reply_markup: {
       inline_keyboard: [
         [{ text: '‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'go_main_menu' }]
       ]
     },
     parse_mode: 'HTML'
   };
 
   await bot.sendMessage(chatId, helpText, menuKeyboard);
 }

 function buildProgressBar(solved, total) {
   const barLength = 10;
   const ratio = solved / total;
   const filledCount = Math.floor(ratio * barLength);
   const emptyCount = barLength - filledCount;
   
   const filledPart = 'üü©'.repeat(filledCount);
   const emptyPart = '‚¨ú'.repeat(emptyCount);
   
   const percent = (ratio * 100).toFixed(0);
   return `[${filledPart}${emptyPart}] ${percent}%`;
 }

 async function showStats(chatId, userId) {
   ensureUserData(userId);
   const solvedCount = userData[userId].completed_tasks.length;
   const totalCount = tasks.length;
   const balance = userData[userId].balance;
 
   const progressBar = buildProgressBar(solvedCount, totalCount);
 
   const text = 
     `<b>–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å</b>\n\n` +
     `–†–µ—à–µ–Ω–æ –∑–∞–¥–∞—á: ${solvedCount} / ${totalCount}\n` +
     `–ë–∞–ª–∞–Ω—Å –æ—á–∫–æ–≤: ${balance}\n\n` +
     `${progressBar}\n\n` +
     `–ß—Ç–æ –¥–∞–ª—å—à–µ?`;
 
   const kb = {
     reply_markup: {
       inline_keyboard: [
         [{ text: '‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'go_main_menu' }],
         [{ text: '–í—Å–µ –∑–∞–¥–∞—á–∏', callback_data: 'show_tasks' }],
         [{ text: '–ü–æ–º–æ—â—å', callback_data: 'show_help' }]
       ]
     },
     parse_mode: 'HTML'
   };
 
   await bot.sendMessage(chatId, text, kb);
 }

 function runUserCode(userCode, functionName, testInput) {
   const vm = new VM({ timeout: 1000, sandbox: {} });
   vm.run(userCode);
   return vm.run(`${functionName}(...${JSON.stringify(testInput)})`);
 }

 bot.onText(/\/start/, async (msg) => {
   const chatId = msg.chat.id;
   const userId = msg.from.id;
   await showMainMenu(chatId, userId);
 });
 
 bot.onText(/\/menu/, async (msg) => {
   const chatId = msg.chat.id;
   const userId = msg.from.id;
   await showMainMenu(chatId, userId);
 });
 
 bot.onText(/\/help/, async (msg) => {
   const chatId = msg.chat.id;
   await showHelp(chatId);
 });
 
 bot.onText(/\/task/, async (msg) => {
   const chatId = msg.chat.id;
   const userId = msg.from.id;
   await showTasks(chatId, userId);
 });

 bot.on('callback_query', async (query) => {
   const chatId = query.message.chat.id;
   const userId = query.from.id;
   const data = query.data;
 
   await bot.answerCallbackQuery(query.id);
 
   if (data === 'show_tasks') {
     return showTasks(chatId, userId);
   }
   if (data === 'show_help') {
     return showHelp(chatId);
   }
   if (data === 'show_stats') {
     return showStats(chatId, userId);
   }
   if (data === 'go_main_menu') {
     return showMainMenu(chatId, userId);
   }

   if (data === 'spin_wheel') {
     ensureUserData(userId);

     const solved = userData[userId].completed_tasks;
     const unsolvedTasks = tasks.filter(t => !solved.includes(t.description));
 
     if (unsolvedTasks.length === 0) {
       const text = `–í—Å–µ –∑–∞–¥–∞—á–∏ —É–∂–µ —Ä–µ—à–µ–Ω—ã!\n\n–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: ${userData[userId].balance}`;
       const kb = {
         reply_markup: {
           inline_keyboard: [
             [{ text: '‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'go_main_menu' }]
           ]
         }
       };
       return bot.sendMessage(chatId, text, kb);
     }

     const chosenTask = await spinWheelAnimation(chatId, unsolvedTasks);
     userData[userId].currentTask = chosenTask;
     return;
   }

   if (data.startsWith('task_')) {
     const taskIndex = parseInt(data.split('_')[1], 10);
     const task = tasks[taskIndex];
     ensureUserData(userId);
 
     userData[userId].currentTask = task;
 
     const text = 
       `<b>–ó–∞–¥–∞—á–∞:</b> ${task.description}\n` + 
       `<b>–ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏:</b> ${task.function_name}\n\n` + 
       `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç JavaScript-–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.`;
 
     const kb = {
       reply_markup: {
         inline_keyboard: [
           [{ text: '‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'go_main_menu' }],
           [{ text: '–ü–æ–º–æ—â—å', callback_data: 'show_help' }]
         ]
       },
       parse_mode: 'HTML'
     };
 
     await bot.sendMessage(chatId, text, kb);
   }
 });

 bot.on('message', async (msg) => {
   if (msg.text.startsWith('/')) return;
 
   const chatId = msg.chat.id;
   const userId = msg.from.id;
   ensureUserData(userId);

   const currentTask = userData[userId].currentTask;
   if (!currentTask) {
     await bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É (/menu).');
     return;
   }
 
   const userCode = msg.text;
   const functionName = currentTask.function_name;
 
   let feedback = '<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:</b>\n';
   let passedAllTests = true;
 
   try {
     const vm = new VM({ timeout: 1000, sandbox: {} });
     vm.run(userCode);
     const fnType = vm.run(`typeof ${functionName}`);
     if (fnType !== 'function') {
       feedback += `\n–û—à–∏–±–∫–∞: —Ñ—É–Ω–∫—Ü–∏—è <code>${functionName}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n`;
       passedAllTests = false;
     } else {
       for (const test of currentTask.tests) {
         const input = test.input;
         const expected = test.expected;
         try {
           let result = runUserCode(userCode, functionName, input);

           if (functionName === 'randomBetween' && typeof expected === 'string' && expected.startsWith('DIAPASON')) {
             const parts = expected.split('_');
             const min = parseInt(parts[1], 10);
             const max = parseInt(parts[2], 10);
             if (typeof result !== 'number' || result < min || result > max) {
               passedAllTests = false;
               feedback += `‚ùå <code>${JSON.stringify(input)}</code>: —á–∏—Å–ª–æ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [${min},${max}] (–ø–æ–ª—É—á–µ–Ω–æ ${result})\n`;
             } else {
               feedback += `‚úÖ <code>${JSON.stringify(input)}</code>: –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [${min},${max}], –ø–æ–ª—É—á–µ–Ω–æ ${result}\n`;
             }
           } else {
             if (result !== expected) {
               passedAllTests = false;
               feedback += `‚ùå <code>${JSON.stringify(input)}</code>: –æ–∂–∏–¥–∞–ª–æ—Å—å ${expected}, –ø–æ–ª—É—á–µ–Ω–æ ${result}\n`;
             } else {
               feedback += `‚úÖ <code>${JSON.stringify(input)}</code>: –ø–æ–ª—É—á–µ–Ω–æ ${result}\n`;
             }
           }
         } catch (errTest) {
           passedAllTests = false;
           const errMsg = errTest.message.split(':')[0];
           feedback += `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ <code>${JSON.stringify(input)}</code>: <i>${errMsg}</i>\n`;
         }
       }
     }
   } catch (err) {
     passedAllTests = false;
     const errorMsg = err.message.split('\n')[0];
     feedback += `\n–û—à–∏–±–∫–∞ –≤ –∫–æ–¥–µ: ${errorMsg}\n`;
   }
 
   if (passedAllTests) {
     if (!userData[userId].completed_tasks.includes(currentTask.description)) {
       userData[userId].completed_tasks.push(currentTask.description);
       userData[userId].balance += 1;
       feedback += `\n<b>–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!</b> +1 –∫ –±–∞–ª–∞–Ω—Å—É.\n`;
     } else {
       feedback += `\n<b>–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã</b>, –Ω–æ –≤—ã —É–∂–µ —Ä–µ—à–∞–ª–∏ —ç—Ç—É –∑–∞–¥–∞—á—É.\n`;
     }
     saveUserData();
   } else {
     feedback += `\n–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n`;
   }
 
   await bot.sendMessage(chatId, feedback, { parse_mode: 'HTML' });

   const solvedCount = userData[userId].completed_tasks.length;
   const totalCount = tasks.length;
   const balance = userData[userId].balance;
   const finalText = 
     `–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance} –æ—á–∫–æ–≤\n` +
     `–†–µ—à–µ–Ω–æ –∑–∞–¥–∞—á: ${solvedCount} / ${totalCount}\n\n` +
     `–ß—Ç–æ –¥–∞–ª—å—à–µ?`;
 
   const kb = {
     reply_markup: {
       inline_keyboard: [
         [{ text: '‚Üê –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'go_main_menu' }],
         [{ text: '–ü–æ–º–æ—â—å', callback_data: 'show_help' }]
       ]
     }
   };
 
   await bot.sendMessage(chatId, finalText, kb);
 });

 bot.on('polling_error', (error) => {
   console.error('polling_error:', error);
 });
 